<?xml version="1.0" encoding="utf-8" ?>
<project name="UppercuTBuild CUSTOM REPLACE" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - Add custom tasks in BuildTasks.Custom folder with file by the same name - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="default" />
  <property name="dirs.current" value="${directory::get-current-directory()}" />  
  <property name="dirs.current.file" value="${directory::get-parent-directory(project::get-buildfile-path())}" />  
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="dirs.build_scripts" value="${dirs.current}${path.separator}${folder.build_scripts}" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${folder.build_scripts_custom}" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${folder.code_build}" />
  <property name="folder.code_drop" value="code_drop" overwrite="false" />
  <property name="dirs.drop" value="${dirs.current}${path.separator}${folder.code_drop}" overwrite="false" />
  <property name="log.build" value="${dirs.build}${path.separator}build.log" />
  <property name="folder.build_artifacts" value="build_artifacts" overwrite="false" />
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <property name="repository.path" value="__REPOSITORY_PATH__" overwrite="false" />
  <property name="company.name" value="__COMPANY_NAME__" overwrite="false" />
  <property name="source_control_type" value="svn" overwrite="false" />
  <property name="version.uppercut" value="0" />
  <property name="version.major" value="0" overwrite="false" />
  <property name="version.minor" value="0" overwrite="false" />
  <property name="version.patch" value="0" overwrite="false" />
  <property name="version.build" value="0" />
  <property name="version.revision" value="0" />
  <property name="version.hash" value="${version.revision}" overwrite="false" />
  <property name="run.ilmerge" value="false" overwrite="false" />
  <property name="obfuscate" value="false" overwrite="false" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks" depends="error_check, build" />

  <target name="error_check">
    <fail message="You must fill out the project.name, repository.path, and company.name settings in the ${build.config.settings} file. Please do that and retry the build."
      if="${project.name=='__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__' or repository.path=='__REPOSITORY_PATH__' or company.name=='__COMPANY_NAME__'}" />
  </target>

  <target name="build">
    <call target="get_revision" />
    <call target="get_build_number" />
    <call target="get_drop_directory" />

    <nant buildfile="${dirs.build_scripts}${path.separator}versionBuilder.step" inheritall="true" />
    <nant buildfile="${dirs.build_scripts}${path.separator}generateBuildInfo.step" inheritall="true" />
    <nant buildfile="${dirs.build_scripts}${path.separator}compile.step" inheritall="true" />
    <nant buildfile="${dirs.build_scripts}${path.separator}analyze.step" inheritall="true" />
    <nant buildfile="${dirs.build_scripts}${path.separator}package.step" inheritall="true" />
    <nant buildfile="${dirs.build_scripts}${path.separator}ilmerge.build" inheritall="true" if="${run.ilmerge}" />
    <nant buildfile="${dirs.build_scripts}${path.separator}nugetPrepare.step" inheritall="true" failonerror="false" />
    <nant buildfile="${dirs.build_scripts}${path.separator}nugetBuild.step" inheritall="true" failonerror="false" />
  </target>

  <target name="get_revision">
    <nant buildfile="${dirs.build_scripts}${path.separator}versioners${path.separator}git.step" inheritall="true" if="${source_control_type=='git'}" failonerror="false" />
  
    <property name="version.revision" value="${environment::get-variable('uc.app.revision')}" if="${environment::variable-exists('uc.app.revision')}" />
    <property name="version.hash" value="${environment::get-variable('uc.app.revision.hash')}" if="${environment::variable-exists('uc.app.revision.hash')}" />
    <property name="version.hash" value="${version.revision}" if="${version.hash == '0'}" />
    <echo level="Warning" message="Using revision number: ${version.revision} and hash: ${version.hash}." />
  </target>

  <target name="get_build_number">
    <property name="version.build" value="${environment::get-variable('CCNetNumericLabel')}" if="${environment::variable-exists('CCNetNumericLabel')}" />
    <property name="version.build" value="${environment::get-variable('BUILD_NUMBER')}" if="${environment::variable-exists('BUILD_NUMBER')}" />
    <echo level="Warning" message="Using build number ${version.build}." />
  </target>

  <target name="get_drop_directory">
    <property name="dirs.drop" value="${environment::get-variable('CCNetArtifactDirectory')}${path.separator}b${version.build}-r${version.revision}" if="${environment::variable-exists('CCNetArtifactDirectory')}" />
    <!--Point TeamCity at code_drop for an artifact directory. It will automatically save the files. -->
    <echo level="Warning" message="Compiled code drop directory will be ${path::get-full-path(dirs.drop)}." />
  </target>

</project>